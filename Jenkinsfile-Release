pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '3'))
  }
  environment {
    GIT_URL = 'https://source.ohsu.edu/OCTRI-Apps/omop-annotator.git'
    GIT_CREDENTIALS = 'gcrcicore-ghe-token'
    DEFAULT_BRANCH = 'main'
    GITHUB_USER = credentials('github-machine-user')
    GITHUB_PROJECT = 'omop-annotator-release'
    RELEASE_URL = 'https://api.github.com/repos/OCTRI/omop-annotator-release/releases'
    RELEASE_UPLOAD_URL = 'https://uploads.github.com/repos/OCTRI/omop-annotator-release/releases'
    UPDATE_CONTENTS_URL = 'https://api.github.com/repos/OCTRI/omop-annotator-release/contents'
  }
  parameters {
    string(name: 'VERSION', description: 'The version to release.')
    string(name: 'DESCRIPTION', description: 'A brief description of the release for external collaborators.')
  }
  tools {
    maven '3.5.0'
    jdk 'JDK11'
  }
  stages {
    stage('Check Parameters') {
      steps {
        deleteDir()
        checkParams(params)
      }
    }
    stage('Release') {
      steps {
        checkoutBranch(env.GIT_URL, env.GIT_CREDENTIALS, env.DEFAULT_BRANCH)
        octriMavenReleasePrep(env.VERSION, env.DEFAULT_BRANCH)
        octriMavenBuild(options: '-DskipTests -Dmaven.repo.local=.repository -Pproduction')
      }
    }
    stage('Create Release Archive') {
      steps {
        script {
          sh '''
          mkdir omop-annotator-release
          cp RUNNING.md omop-annotator-release/
          cp target/omop_annotator.jar omop-annotator-release/omop_annotator-${VERSION}.jar
          '''
          zip zipFile: "omop_annotator-${VERSION}.zip", dir: 'omop-annotator-release', glob: "*"

          def server = Artifactory.server 'octri-artifactory'
          server.credentialsId = 'jenkins-artifactory'

          def uploadSpec = """{
            "files": [
              {
                "pattern": "omop_annotator*.zip",
                "target": "libs-staging-local/org/octri/omop-annotator-release/${VERSION}/"
              }
            ]
          }"""

          def buildInfo = server.upload(uploadSpec)
          server.publishBuildInfo(buildInfo)
        }
      }
    }
    stage('Build Docker Image') {
      steps {
        mavenDockerMetadata(env)
        buildProjectDockerImage(env.IMAGE_NAME, env.VERSION)
        bumpKubernetesManifests(env.IMAGE_NAME, env.VERSION, env.DEFAULT_BRANCH)
      }
    }
    stage('Next Version') {
      steps {
        // blank string calculates next version from pom.xml
        nextDevelopmentVersion('', env.DEFAULT_BRANCH)
        octriMavenBuild()
        buildProjectDockerImage(env.IMAGE_NAME)
      }
    }
    stage('Create GitHub Release') {
      steps {
        script {
          // Update metadata in the public Github repo to associate the new tag with a code change
          sh '''
          curl -X GET -u ${GITHUB_USER} ${UPDATE_CONTENTS_URL}/metadata.json | jq .sha | sed 's:"::g' > sha.txt
          echo "{\\"version\\": \\"${VERSION}\\"}" | base64 > metadata.json
          curl -X PUT -u ${GITHUB_USER} -H 'Accept: application/vnd.github.v3+json' ${UPDATE_CONTENTS_URL}/metadata.json -d "{\\"message\\": \\"Release ${VERSION}\\", \\"content\\":\\"$(cat metadata.json)\\", \\"sha\\": \\"$(cat sha.txt)\\"}"
          '''
          def releaseName = "OMOP Annotator ${params.VERSION}"
          def zipFileName = "omop_annotator-${params.VERSION}.zip"
          def releaseId = publishGitHubRelease(env.GITHUB_PROJECT, params.VERSION, releaseName, params.DESCRIPTION)
          uploadGitHubReleaseZip(env.GITHUB_PROJECT, releaseId, zipFileName)
        }
      }
    }
  }
}
