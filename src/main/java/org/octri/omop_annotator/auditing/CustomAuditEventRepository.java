package org.octri.omop_annotator.auditing;

import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.octri.authentication.server.security.entity.LoginAttempt;
import org.octri.omop_annotator.auditing.RequestAuditEvent.RequestType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.audit.AuditEvent;
import org.springframework.boot.actuate.audit.AuditEventRepository;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;

/**
 * Persists {@link AuditEvent}s generated by the {@link DataRequestAuditingAspect}.
 *
 * <p>
 * NOTE: This class currently handles all published AuditEvents. In addition to the ApplicationAuditEvent generated on
 * data read, this also includes Authentication (success and failure) and Authorization (access denied) events. This
 * class only persists AuditEvents with the type {@link DataRequestAuditingAspect.REQUEST_EVENT_TYPE}, and logs all
 * others to the console. We persist {@link LoginAttempt}s in the Authentication handlers.
 * </p>
 */
@Component
public class CustomAuditEventRepository implements AuditEventRepository {

	private static final Log log = LogFactory.getLog(CustomAuditEventRepository.class);
	private final ObjectMapper objectMapper = new ObjectMapper();

	@Autowired
	private RequestAuditEventRepository repository;

	@Override
	public void add(AuditEvent event) {

		// Persist any data request audit events; log any other audits.
		if (event.getType() == DataRequestAuditingAspect.REQUEST_EVENT_TYPE) {

			RequestAuditEvent audit = new RequestAuditEvent();
			audit.setUsername(event.getPrincipal());
			audit.setRequestedAt(Date.from(event.getTimestamp()));

			Map<String, Object> data = event.getData();
			Assert.notNull(data, "data may not be null");

			audit.setServiceClass((String) data.get(DataRequestAuditingAspect.SERVICE_CLASS));
			audit.setServiceMethod((String) data.get(DataRequestAuditingAspect.SERVICE_METHOD));
			audit.setRequestType((RequestType) data.get(DataRequestAuditingAspect.REQUEST_TYPE));
			audit.setIpAddress((String) data.get(DataRequestAuditingAspect.IP_ADDRESS));

			if (data.get(DataRequestAuditingAspect.PARAMS) != null) {
				try {
					audit.setParams(objectMapper.writeValueAsString(data.get(DataRequestAuditingAspect.PARAMS)));
				} catch (JsonProcessingException e) {
					log.error("Error serializing audit data");
					e.printStackTrace();
				}
			}

			repository.save(audit);
		} else {
			log.info(event);
		}
	}

	@Override
	public List<AuditEvent> find(String principal, Instant after, String type) {
		throw new UnsupportedOperationException("Not yet implemented");
	}

}
